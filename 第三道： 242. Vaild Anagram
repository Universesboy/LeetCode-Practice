第三道： 242. Vaild Anagram
Method:  **Sorting**, **Counter, HashMap**

**Sorting:**

```python
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return sorted(s) == sorted(t)
```

**Counter:**

```python
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return Counter(s) == Counter(t)
```

**Counter** is a sub-class that is used to count hashable objects. It implicitly creates a hash table of an iterable when invoked.

**HashMap:**
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len (t):
            return False
        countS, countT = {},{}
        for i in range (len(s)):
            countS[s[i]] = 1+ countS.get(s[i],0)
            countT[t[i]] = 1+ countT.get(t[i],0)
        for c in countS:
            if countS[c] != countT.get(c,0):
                return False
        
        return True
