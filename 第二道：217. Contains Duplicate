第二道：217. Contains Duplicate 
Method can use: TLE, Sorting, HashSet, HashMap

1: **TLE(Time Limit Exceeded)**

```python
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        n = len(nums)
        for i in range(n - 1):
            for j in range(i + 1, n):
                if nums[i] == nums[j]:
                    return True
        return False
```
Study point: 
- The len() function **returns the number of items in an object**.

**Approach 2: Sorting**
**Intuition:**
The sorting approach sorts the array in ascending order and then checks for adjacent elements that are the same. If any duplicates are found, it returns `true`. Sorting helps in bringing duplicates together, simplifying the check. However, sorting has a time complexity of O(n log n).

```python
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        nums.sort()
        n = len(nums)
        for i in range(1, n):
            if nums[i] == nums[i - 1]:
                return True
        return False
```

**Approach 3: Hash Set**
```python
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        hashset = set()

        for n in nums:
          if n in hashset:
            return True
          hashset.add(n)
        return False
        
```

**Approach 4: Hash Map**

```python
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        seen = {}
        for num in nums:
            if num in seen and seen[num] >= 1:
                return True
            seen[num] = seen.get(num, 0) + 1
        return False
```

**what else I’ve learned**
Understanding Hash Maps, Hash Tables, and Hash Sets in Python
