Solving method: sorting, hashmap

From NeetCode: 

```
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        ans = defaultdict (list) #mapping charCount to list of anagrams. defauldict it means "Defining a dictionary with values as a list."
        for s in strs:
            count = [0]*26 #a-z

            for c in s:
                count [ord(c)-ord("a")]+= 1
            ans[tuple(count)].append(s)
        return ans.values()

```

From LeetCode:

```python
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        anagram_map = defaultdict(list)
        
        for word in strs:
            sorted_word = ''.join(sorted(word))
            anagram_map[sorted_word].append(word)
        
        return list(anagram_map.values()) 

```

what I’ve learned:

- **defaultdict(list)**
    
    **Using List as default_factory**
    
    When the list class is passed as the default_factory argument, then a defaultdict is created with the values that are list.
    
    `# Defining a dict`
    
    `d =` `defaultdict(list)`
    
    `for` `i in` `range(5):`
    
    `d[i].append(i)`
    
    `print("Dictionary with values as list:")`
    
    `print(d)`
    
    ---
    
    **Output:**
    
    ```
    Dictionary with values as list:
    defaultdict(<class 'list'>, {0: [0], 1: [1], 2: [2], 3: [3], 4: [4]})
    ```
    
    **Using int as default_factory**
    
    When the int class is passed as the default_factory argument, then a defaultdict is created with default value as zero.
    
    `# Defining the dict`
    
    `d =` `defaultdict(int)`
    
    `L =` `[1, 2, 3, 4, 2, 4, 1, 2]`
    
    `# Iterate through the list`
    
    `# for keeping the count`
    
    `for` `i in` `L:`
    
    `# The default value is 0`
    
    `# so there is no need to`
    
    `# enter the key first`
    
    `d[i] +=` `1`
    
    `print(d)`
    
    ---
    
    **Output:**
    
    ```
    defaultdict(<class 'int'>, {1: 2, 2: 3, 3: 1, 4: 2})
    ```
    
    **Example:**
    
    - link: https://www.geeksforgeeks.org/defaultdict-in-python/
- **append**
    - 
    
    ![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/7a896af6-3d9c-49b8-8e31-237a52b540d2/f3abed5b-cc3e-44b5-a136-9bd0fdaa58b5/Untitled.png)
    
- **ord**
    - Definition and Usage
    
    The `ord()` function returns the number representing the unicode code of a specified character.
    
    ---
    
    Syntax
    
    ord(*character*)
    
    Parameter Values
    
    | Parameter | Description |
    | --- | --- |
    | character | String, any character |
- tuple
    - Tuple
    
    Tuples are used to store multiple items in a single variable.
    
    Tuple is one of 4 built-in data types in Python used to store collections of data, the other 3 are [List](https://www.w3schools.com/python/python_lists.asp), [Set](https://www.w3schools.com/python/python_sets.asp), and [Dictionary](https://www.w3schools.com/python/python_dictionaries.asp), all with different qualities and usage.
    
    A tuple is a collection which is ordered and **unchangeable**.
    
    Tuples are written with round brackets.
    
- join
                                                                                                            
